VLAB-Monitoring ... External-Scanner module

Python code

External Configuration:
*************** DYNACONF ******************
https://github.com/rochacbruno/dynaconf

Especially good for "12-Factor Applications"
1) Strict separation of settings from code
2) Comprehensive default values
3) Store parameters in multiple file formats >>> .toml, .json, .yaml, .ini and .py
4) Sensitive secrets like tokens & passwords can be stored in safe places like .secrets or vault
5) Parameters can optionally be stored in external services like REDIS 
6) Simple feature flag system 
7) Layered [environment] system
8) Environment variables to override parameters
9) Support for .env files to automate the export of environment variables
10) Correct data types
11) Only one canonical settings module to rule all 
12) Drop in extension for Flask app.config
13) Drop in extension for Django conf.settings
14) Powerful $dynaconf CLI to manage via console
15) Customizable Validation system to ensure correct config parameters
16) Allow change of dynamic parameters on the fly 

SOS: Python 3.x is required
$>pip install dynaconf

SOS: Default installation supports .toml, .py and .json file formats and 
also environment variables 
To support YAML add: pip install dynaconf[yaml] OR pip install dynaconf[all] 
 
*********************************** DOT-ENV ***********************************
https://github.com/theskumar/python-dotenv

Reads the "key/value" ... pair from the ".env" file & adds them to environment variable  

USAGE
! Accessing config variables in my-python-application !
Easiest and most common usage ... 
1) When application starts: load_dotenv()
2) Load environment variables from a file .env in {current directory && parents && specified path}
3) Call Python standard "os" module ...  os.getenv()
4) Check ".env" file:
     # A comment and will be ignored
     REDIS_ADDRESS=localhost:6379
     MEANING_OF_LIFE=42
     MULTILINE_VAR="hello\nworld"
   Optionally you can EXPORT each line and allow you to $>source .env:
     EXPORT REDIS_ADDRESS=localhost:6379
5) POSIX variable expansion: Environment is first, ".env" after:
     CONFIG_PATH=${HOME}/.config/foo
     DOMAIN=example.org
     EMAIL=admin@${DOMAIN}

GETTING STARTED
! Assuming you have .env file along-side your settings module !

current-folder { .env , settings.py }

Add the following code to your setting.py:

# settings.py
from dotenv import load_dotenv
load_dotenv()

# OR the same with increased verbosity
load_dotenv(verbose=True)

# OR, explicitly providing path to .env
from pathlib import Path # python3 only

env_path = Path('.')/'.env'

load_dotenv( dotenv_path=env_path )

At this point, parsed key/value from the .env file is ...
Now present as system environment variable and ...
Can be conveniently accessed via os.getenv()

# settings.py
import os

SECRET_KEY = os.getenv("EMAIL")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD")

! Try to find .env file ... Using the __file__ , walking up dir tree !
from dotenv import load_dotenv, find_dotenv

load_dotenv( find_dotenv() )

********************************* HONCHO ***********************************
https://github.com/nickstenning/honcho

A Python port of Foreman, a tool for managing Procfile-based applications 

Procfile is ... https://devcenter.heroku.com/articles/procfile

HOW TO INSTALL 
pip install honcho

HOW TO USE
Step 1: Write a Procfile:
  $> cat >Procfile <<EOM
  web: python serve.py
  redis: redis-server
  EOM

Step 2: (Optional) write an .env file 
  $> cat >.env <<EOM
  PORT=6000
  REDIS_URL=redis://localhost:6789/0
  EOM

Step 3: Run the application with Honcho
  $> honcho start 
